<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6dr8AKtz
        8wCxffQAsHv0AOXU+wDcxPoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANvE
        +gCWUfAArHXzAMCW9gq8kPUu4Mv6AubW/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC1hfQAiTvuAJhU8AC3iPUWmljwlqNn8mh9KOwA4c37AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA07X5AIY27QCbWfEApWryHJZQ8LSPRe/wpGfyNKJk8gDeyPoAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANO1+QCeXvEAnFrxAJ9g8RyQRu+1iTvu/5BH79SzgvQVtIP0AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAq3PzAKtz8wC2hfQZk0zwtYk87v+JO+7/kkvvvs2r+AnJpfcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMml9wC3h/UAyKT3CpdT8J2KPe7/iTvu/4k77v+KPO6oomXyApxb
        8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7OD8ABcA3QCeXvFvjEDu+4k77v+JO+7/iTvu/5FI
        77vKqPcIx6L3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGX9gCiZPIAqXHzMJBG7+OJO+7/iTvu/4k7
        7v+JOu7/kUjv27eH9RqXU/AAkkrvAKFj8QCygPQAyKP3AMCX9gDhzfsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUuPkAz6/4AP///wSaV/Chijzu/4k7
        7v+JO+7/iTvu/4k77v+LP+75k0zvkJlV8GedXfFVpGnyObJ/9Br///8DjD/uALOB9AD///8A07b5AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUuPkAkUfvAK128wBxEuoAqG/yPI5E
        7+yJO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/ij3u/4s+7vyNQu/ykEfv2JRO8KWdXPFdtYT0HEcA
        5QCvevMALgDhAObV+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt4j1ANK1+QCWUfAAtIL0Fp9f
        8XiRSe/aiTzu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JOu7/iTvu/4s/
        7v2SSu/Xnl7xeLaF9BiNQe8A3cb6AMyq9wAAAAAAAAAAAAAAAAAAAAAAAAAAAMuo+ADHovcARwDkAKNn
        8kCSSu/Ciz7u/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k67v+LPu7/lEzwx6Rn8kIAALoAy6j3AMmk9wAAAAAAAAAAAAAAAADRsvgA0bP4AP//
        /wGkaPJgj0Xv5ok77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/kEbv6aVp8mL///8Bzaz4AMuo+AAAAAAA+PP+AP//
        /wCGNe0ApGjyVJBG7/CJO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JOu7/j0Xv8KJk8lSGN+4A////APDm
        /QC9kfUAoWLxAKx08yeQR+/YiTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/kEbv2Kpx
        8yefYPEAuIj1ANGy+AD///8Bm1nxk4o97v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+KPO7/mVbwk////wHJpfcArHTzAKx18x+QRu/diTru/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k67v+PRu/frnjzIqx18wCWUfAAoGHxTYw/7vqJO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4xA7vugYvFPl1PwAI1C7wCZVvBoij3u/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/ij3u/5dT8GiNQe4AjEHuAJZR8GiKPe7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+KPe7/lU/waIxA7gCUTfAAn2DxVYs/
        7vyJO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4s+7vycW/FVk0vvAKlx
        8wCrdPMqj0Xv6Ik67v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JOu7/jkTv6Kdt
        8iqlavIAyKT3AOTT+wWXUfCmiTzu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+VUPCm3MX6BcKZ9gC7jvUAnl7xAKdt8jyPRO/qiTru/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/j0Xv66Vp8jycW/EAtoX0ANi/+gDSs/kAAAAAAJ1b8XGMQO76iTru/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTru/4xA7vqfYPF2////ANCx+ADYv/oAAAAAAMSc9wC0gvQAz674BppX8X+NQu/5iTvu/4k7
        7v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k67v+NQe/5mFTwf8ij9waxfvQAwpn2AAAAAAAAAAAAAAAAALB79AC2hfUA4Mz7BqBh
        8WqORO/hiTzu/4k67v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k67v+JPO7/kUjv5qFj8WzcxPoGs4H0AK138wAAAAAAAAAAAAAAAAAAAAAAAAAAALuP
        9QC8kPUAaAPpAKNn8i+XU/CjjkTv8Io87v+JO+7/iTvu/4k77v+JO+7/iTvu/4k77v+JO+7/iTvu/4k7
        7v+JO+7/iTvu/4k77v+KPO7/jkTv8JlW8KirdPM1AADMAL6T9gC5ivUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALuP9QDdx/oAn2DxAObW+wemavI6mFTwjZJK79GNQe/xiz7u/4o87v+JO+7/iTvu/4k7
        7v+JO+7/ijzu/4s+7v+MQe7xkknv0ZhT8I2kaPI65tb7B6Nm8gDq3fwA0LD4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMup+ADAlvYAzaz4AKJk8gAAALUAtob1FKFj8jidXPFjmFTwhZNL
        75eaWPGumljxrpNL75eYVPCFnVzxY6Bi8Ti1hPQUAAC2AKBi8QDNq/gAvI/1APTs/QAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA17z5AOnZ/AC1hfQAnVzxAIxA
        7gBsC+oAAADAAP///wT///8EAADAAGwL6gCMQO4AnFvxALSC9ADo2PwA17z5AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//wf///wH///4B///8Af///AP///gD///wA///8AP//+AAD//AAAP/AA
        AA/gAAAHwAAAA4AAAAGAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAAAABwAAAA+AAAAfwAAAP+AAAH/8AAP8=
</value>
  </data>
</root>